/* Generated By:JJTree&JavaCC: Do not edit this line. MyNewGrammar.java */
package compilers_project_2;

import java.io.FileNotFoundException;
import java.io.FileInputStream;

public class MyNewGrammar/*@bgen(jjtree)*/implements MyNewGrammarTreeConstants, MyNewGrammarConstants {/*@bgen(jjtree)*/
  protected static JJTMyNewGrammarState jjtree = new JJTMyNewGrammarState();
  // trie
  public Trie trie;

  static String tokenName[] = new String[1000];

  public static void main( String args [] ) throws ParseException
  {
tokenName[0] = "EOF"; tokenName[4] = "EOL";
        tokenName[5] = "_plus"; tokenName[6] = "_minus"; tokenName[7] = "_multiplication";
        tokenName[8] = "_division"; tokenName[9] = "_mod"; tokenName[10] = "_assignop";
        tokenName[11] = "_semicolon"; tokenName[12] = "_comma"; tokenName[13] = "_period";
        tokenName[14] = "_leftparen"; tokenName[15] = "_rightparen"; tokenName[16] = "_leftbracket";
        tokenName[17] = "_rightbracket"; tokenName[18] = "_leftbrace"; tokenName[19] = "_rightbrace";
        tokenName[20] = "_less"; tokenName[21] = "_lessequal"; tokenName[22] = "_greater";
        tokenName[23] = "_greaterequal"; tokenName[24] = "_equal"; tokenName[25] = "_notequal";
        tokenName[26] = "_and"; tokenName[27] = "_or"; tokenName[28] = "_not";
        tokenName[29] = "_boolean"; tokenName[30] = "_break"; tokenName[31] = "_class";
        tokenName[32] = "_double"; tokenName[33] = "_else"; tokenName[34] = "_extends";
        tokenName[35] = "_for"; tokenName[36] = "_if"; tokenName[37] = "_implements";
        tokenName[38] = "_int"; tokenName[39] = "_interface"; tokenName[40] = "_new";
        tokenName[41] = "_newarray"; tokenName[42] = "_null"; tokenName[43] = "_println";
        tokenName[44] = "_readln"; tokenName[45] = "_return"; tokenName[46] = "_string";
        tokenName[47] = "_void"; tokenName[48] = "_while"; tokenName[49] = "_booleanconstant";
        tokenName[50] = "_id"; tokenName[51] = "_intconstant"; tokenName[52] = "_doubleconstant";
        tokenName[53] = "_stringconstant"; tokenName[54] = "DIGIT"; tokenName[55] = "LETTER";
        tokenName[56] = "ALPHABET";

    MyNewGrammar parser = null;
    ExtendedNode n;

    if ( args.length > 0 )
    {
                try
                {
                // We have a file to parse
                System.out.println( "file specified! Reading from file...\u005cn" );
                parser = new MyNewGrammar( new FileInputStream( args[0] ) );

                // Display tokens
                        while ( jj_ntk == -1 )
                        {
                                // Get the next token
                                Token token = getNextToken();
                                //System.out.print( token.toString() + " " );

                                if ( tokenName[token.kind].equals( "EOF" ) )
                                {
                                        // End of File. Terminate
                                        break;
                                }
                                else if ( tokenName[token.kind].equals( "EOL" ) )
                                {
                                        // New line 
                                        System.out.print( "\u005cn" );
                                }
                                else
                                {
                                        // Print the type of token we're parsing
                                        System.out.println( tokenName[token.kind] + " " );

                                }

                        }
                        System.out.println();
                        System.out.println();

                        // Reinitialize parser
                        ReInit(new FileInputStream( args[0]));
                }
                catch ( FileNotFoundException e )
                {
                    // Specified file doesn't exist so don't go any further
                    System.out.println( "file not found! Terminating..." );
                    return;
                }
        }
        else
        {
                // Default to console input
                System.out.println( "No file specified! Reading from standard input...\u005cn" );
                parser = new MyNewGrammar( System.in );
        }

        try
        {
                n = MyNewGrammar.Start();
                System.out.println("Printing parse tree...");
        n.dump("");
            parser.trie = new Trie();

        }
        catch ( Exception e )
        {
            System.out.println( "NOK." );
            System.out.println( e.getMessage() );
            parser.ReInit( System.in );
        }
        catch ( Error e )
        {
                System.out.println( "Oops." );
        System.out.println( e.getMessage() );
        }
  }

  static final public ExtendedNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  ExtendedNode jjtn000 = new ExtendedNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Program();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Program() throws ParseException {
 /*@bgen(jjtree) Program */
  ExtendedNode jjtn000 = new ExtendedNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Decl();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _boolean:
      case _class:
      case _double:
      case _int:
      case _interface:
      case _string:
      case _void:
      case _id:
        Program();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Decl() throws ParseException {
 /*@bgen(jjtree) Decl */
  ExtendedNode jjtn000 = new ExtendedNode(JJTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(3)) {
        VariableDecl();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _boolean:
        case _double:
        case _int:
        case _string:
        case _void:
        case _id:
          FunctionDecl();
          break;
        case _class:
          ClassDecl();
          break;
        case _interface:
          InterfaceDecl();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void VariableDecl() throws ParseException {
 /*@bgen(jjtree) VariableDecl */
  ExtendedNode jjtn000 = new ExtendedNode(JJTVARIABLEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Variable();
      jj_consume_token(_semicolon);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Variable() throws ParseException {
 /*@bgen(jjtree) Variable */
  ExtendedNode jjtn000 = new ExtendedNode(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      jj_consume_token(_id);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Type() throws ParseException {
 /*@bgen(jjtree) Type */
  ExtendedNode jjtn000 = new ExtendedNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _int:
        jj_consume_token(_int);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case _leftbracket:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_1;
          }
          jj_consume_token(_leftbracket);
          jj_consume_token(_rightbracket);
        }
        break;
      case _double:
        jj_consume_token(_double);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case _leftbracket:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_2;
          }
          jj_consume_token(_leftbracket);
          jj_consume_token(_rightbracket);
        }
        break;
      case _boolean:
        jj_consume_token(_boolean);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case _leftbracket:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
          jj_consume_token(_leftbracket);
          jj_consume_token(_rightbracket);
        }
        break;
      case _string:
        jj_consume_token(_string);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case _leftbracket:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_4;
          }
          jj_consume_token(_leftbracket);
          jj_consume_token(_rightbracket);
        }
        break;
      case _id:
        jj_consume_token(_id);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case _leftbracket:
            ;
            break;
          default:
            jj_la1[6] = jj_gen;
            break label_5;
          }
          jj_consume_token(_leftbracket);
          jj_consume_token(_rightbracket);
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void FunctionDecl() throws ParseException {
 /*@bgen(jjtree) FunctionDecl */
  ExtendedNode jjtn000 = new ExtendedNode(JJTFUNCTIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _boolean:
      case _double:
      case _int:
      case _string:
      case _id:
        Type();
        jj_consume_token(_id);
        jj_consume_token(_leftparen);
        Formals();
        jj_consume_token(_rightparen);
        StmtBlock();
        break;
      case _void:
        jj_consume_token(_void);
        jj_consume_token(_id);
        jj_consume_token(_leftparen);
        Formals();
        jj_consume_token(_rightparen);
        StmtBlock();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Formals() throws ParseException {
 /*@bgen(jjtree) Formals */
  ExtendedNode jjtn000 = new ExtendedNode(JJTFORMALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _boolean:
      case _double:
      case _int:
      case _string:
      case _id:
        VariableList();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void VariableList() throws ParseException {
 /*@bgen(jjtree) VariableList */
  ExtendedNode jjtn000 = new ExtendedNode(JJTVARIABLELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Variable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _comma:
        jj_consume_token(_comma);
        VariableList();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ClassDecl() throws ParseException {
 /*@bgen(jjtree) ClassDecl */
  ExtendedNode jjtn000 = new ExtendedNode(JJTCLASSDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(_class);
      jj_consume_token(_id);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _extends:
        jj_consume_token(_extends);
        jj_consume_token(_id);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _implements:
        ImplementsList();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(_leftbrace);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _boolean:
      case _double:
      case _int:
      case _string:
      case _void:
      case _id:
        FieldList();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(_rightbrace);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ImplementsList() throws ParseException {
 /*@bgen(jjtree) ImplementsList */
  ExtendedNode jjtn000 = new ExtendedNode(JJTIMPLEMENTSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(_implements);
      jj_consume_token(_id);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _comma:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_6;
        }
        jj_consume_token(_comma);
        jj_consume_token(_implements);
        jj_consume_token(_id);
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void FieldList() throws ParseException {
 /*@bgen(jjtree) FieldList */
  ExtendedNode jjtn000 = new ExtendedNode(JJTFIELDLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Field();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _boolean:
      case _double:
      case _int:
      case _string:
      case _void:
      case _id:
        FieldList();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Field() throws ParseException {
 /*@bgen(jjtree) Field */
  ExtendedNode jjtn000 = new ExtendedNode(JJTFIELD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(3)) {
        VariableDecl();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _boolean:
        case _double:
        case _int:
        case _string:
        case _void:
        case _id:
          FunctionDecl();
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void InterfaceDecl() throws ParseException {
 /*@bgen(jjtree) InterfaceDecl */
  ExtendedNode jjtn000 = new ExtendedNode(JJTINTERFACEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(_interface);
      jj_consume_token(_id);
      jj_consume_token(_leftbrace);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _boolean:
      case _double:
      case _int:
      case _string:
      case _void:
      case _id:
        PrototypeList();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(_rightbrace);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void PrototypeList() throws ParseException {
 /*@bgen(jjtree) PrototypeList */
  ExtendedNode jjtn000 = new ExtendedNode(JJTPROTOTYPELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Prototype();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _boolean:
      case _double:
      case _int:
      case _string:
      case _void:
      case _id:
        PrototypeList();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Prototype() throws ParseException {
 /*@bgen(jjtree) Prototype */
  ExtendedNode jjtn000 = new ExtendedNode(JJTPROTOTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _boolean:
      case _double:
      case _int:
      case _string:
      case _id:
        Type();
        jj_consume_token(_id);
        jj_consume_token(_leftparen);
        Formals();
        jj_consume_token(_rightparen);
        jj_consume_token(_semicolon);
        break;
      case _void:
        jj_consume_token(_void);
        jj_consume_token(_id);
        jj_consume_token(_leftparen);
        Formals();
        jj_consume_token(_rightparen);
        jj_consume_token(_semicolon);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void StmtBlock() throws ParseException {
 /*@bgen(jjtree) StmtBlock */
  ExtendedNode jjtn000 = new ExtendedNode(JJTSTMTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(_leftbrace);
      StmtBlockPrime();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void StmtBlockPrime() throws ParseException {
 /*@bgen(jjtree) StmtBlockPrime */
  ExtendedNode jjtn000 = new ExtendedNode(JJTSTMTBLOCKPRIME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_3(3)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _minus:
        case _semicolon:
        case _leftparen:
        case _leftbrace:
        case _not:
        case _break:
        case _for:
        case _if:
        case _new:
        case _newarray:
        case _null:
        case _println:
        case _readln:
        case _return:
        case _while:
        case _booleanconstant:
        case _id:
        case _intconstant:
        case _doubleconstant:
        case _stringconstant:
          StmtList();
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        jj_consume_token(_rightbrace);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _boolean:
        case _double:
        case _int:
        case _string:
        case _id:
          VariableDeclList();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case _minus:
          case _semicolon:
          case _leftparen:
          case _leftbrace:
          case _not:
          case _break:
          case _for:
          case _if:
          case _new:
          case _newarray:
          case _null:
          case _println:
          case _readln:
          case _return:
          case _while:
          case _booleanconstant:
          case _id:
          case _intconstant:
          case _doubleconstant:
          case _stringconstant:
            StmtList();
            break;
          default:
            jj_la1[21] = jj_gen;
            ;
          }
          jj_consume_token(_rightbrace);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void VariableDeclList() throws ParseException {
 /*@bgen(jjtree) VariableDeclList */
  ExtendedNode jjtn000 = new ExtendedNode(JJTVARIABLEDECLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      VariableDecl();
      VariableDeclListPrime();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void VariableDeclListPrime() throws ParseException {
 /*@bgen(jjtree) VariableDeclListPrime */
  ExtendedNode jjtn000 = new ExtendedNode(JJTVARIABLEDECLLISTPRIME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_4(2)) {
        VariableDeclList();
      } else {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;

      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void StmtList() throws ParseException {
 /*@bgen(jjtree) StmtList */
  ExtendedNode jjtn000 = new ExtendedNode(JJTSTMTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Stmt();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _minus:
      case _semicolon:
      case _leftparen:
      case _leftbrace:
      case _not:
      case _break:
      case _for:
      case _if:
      case _new:
      case _newarray:
      case _null:
      case _println:
      case _readln:
      case _return:
      case _while:
      case _booleanconstant:
      case _id:
      case _intconstant:
      case _doubleconstant:
      case _stringconstant:
        StmtList();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Stmt() throws ParseException {
 /*@bgen(jjtree) Stmt */
  ExtendedNode jjtn000 = new ExtendedNode(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _minus:
      case _semicolon:
      case _leftparen:
      case _not:
      case _new:
      case _newarray:
      case _null:
      case _readln:
      case _booleanconstant:
      case _id:
      case _intconstant:
      case _doubleconstant:
      case _stringconstant:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _minus:
        case _leftparen:
        case _not:
        case _new:
        case _newarray:
        case _null:
        case _readln:
        case _booleanconstant:
        case _id:
        case _intconstant:
        case _doubleconstant:
        case _stringconstant:
          Expr();
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        jj_consume_token(_semicolon);
        break;
      case _if:
        IfStmt();
        break;
      case _while:
        WhileStmt();
        break;
      case _for:
        ForStmt();
        break;
      case _break:
        BreakStmt();
        break;
      case _return:
        ReturnStmt();
        break;
      case _println:
        PrintStmt();
        break;
      case _leftbrace:
        StmtBlock();
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void IfStmt() throws ParseException {
 /*@bgen(jjtree) IfStmt */
  ExtendedNode jjtn000 = new ExtendedNode(JJTIFSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(_if);
      jj_consume_token(_leftparen);
      Expr();
      jj_consume_token(_rightparen);
      Stmt();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _else:
        jj_consume_token(_else);
        Stmt();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void WhileStmt() throws ParseException {
 /*@bgen(jjtree) WhileStmt */
  ExtendedNode jjtn000 = new ExtendedNode(JJTWHILESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(_while);
      jj_consume_token(_leftparen);
      Expr();
      jj_consume_token(_rightparen);
      Stmt();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ForStmt() throws ParseException {
 /*@bgen(jjtree) ForStmt */
  ExtendedNode jjtn000 = new ExtendedNode(JJTFORSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(_for);
      jj_consume_token(_leftparen);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _minus:
      case _leftparen:
      case _not:
      case _new:
      case _newarray:
      case _null:
      case _readln:
      case _booleanconstant:
      case _id:
      case _intconstant:
      case _doubleconstant:
      case _stringconstant:
        Expr();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(_semicolon);
      Expr();
      jj_consume_token(_semicolon);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _minus:
      case _leftparen:
      case _not:
      case _new:
      case _newarray:
      case _null:
      case _readln:
      case _booleanconstant:
      case _id:
      case _intconstant:
      case _doubleconstant:
      case _stringconstant:
        Expr();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      jj_consume_token(_rightparen);
      Stmt();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void BreakStmt() throws ParseException {
 /*@bgen(jjtree) BreakStmt */
  ExtendedNode jjtn000 = new ExtendedNode(JJTBREAKSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(_break);
      jj_consume_token(_semicolon);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ReturnStmt() throws ParseException {
 /*@bgen(jjtree) ReturnStmt */
  ExtendedNode jjtn000 = new ExtendedNode(JJTRETURNSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(_return);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _minus:
      case _leftparen:
      case _not:
      case _new:
      case _newarray:
      case _null:
      case _readln:
      case _booleanconstant:
      case _id:
      case _intconstant:
      case _doubleconstant:
      case _stringconstant:
        Expr();
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      jj_consume_token(_semicolon);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void PrintStmt() throws ParseException {
 /*@bgen(jjtree) PrintStmt */
  ExtendedNode jjtn000 = new ExtendedNode(JJTPRINTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(_println);
      jj_consume_token(_leftparen);
      ExprList();
      jj_consume_token(_rightparen);
      jj_consume_token(_semicolon);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ExprList() throws ParseException {
 /*@bgen(jjtree) ExprList */
  ExtendedNode jjtn000 = new ExtendedNode(JJTEXPRLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _comma:
        jj_consume_token(_comma);
        ExprList();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Expr() throws ParseException {
 /*@bgen(jjtree) Expr */
  ExtendedNode jjtn000 = new ExtendedNode(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OpPrecedence1();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void OpPrecedence1() throws ParseException {
 /*@bgen(jjtree) OpPrecedence1 */
  ExtendedNode jjtn000 = new ExtendedNode(JJTOPPRECEDENCE1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OpPrecedence2();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _or:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_7;
        }
        jj_consume_token(_or);
        OpPrecedence2();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void OpPrecedence2() throws ParseException {
 /*@bgen(jjtree) OpPrecedence2 */
  ExtendedNode jjtn000 = new ExtendedNode(JJTOPPRECEDENCE2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OpPrecedence3();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _and:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_8;
        }
        jj_consume_token(_and);
        OpPrecedence3();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void OpPrecedence3() throws ParseException {
 /*@bgen(jjtree) OpPrecedence3 */
  ExtendedNode jjtn000 = new ExtendedNode(JJTOPPRECEDENCE3);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OpPrecedence4();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _equal:
        case _notequal:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _equal:
          jj_consume_token(_equal);
          break;
        case _notequal:
          jj_consume_token(_notequal);
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        OpPrecedence4();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void OpPrecedence4() throws ParseException {
 /*@bgen(jjtree) OpPrecedence4 */
  ExtendedNode jjtn000 = new ExtendedNode(JJTOPPRECEDENCE4);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OpPrecedence5();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _less:
      case _lessequal:
      case _greater:
      case _greaterequal:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _less:
          jj_consume_token(_less);
          break;
        case _lessequal:
          jj_consume_token(_lessequal);
          break;
        case _greater:
          jj_consume_token(_greater);
          break;
        case _greaterequal:
          jj_consume_token(_greaterequal);
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        OpPrecedence5();
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void OpPrecedence5() throws ParseException {
 /*@bgen(jjtree) OpPrecedence5 */
  ExtendedNode jjtn000 = new ExtendedNode(JJTOPPRECEDENCE5);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OpPrecedence6();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _plus:
        case _minus:
        case _mod:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _plus:
          jj_consume_token(_plus);
          break;
        case _minus:
          jj_consume_token(_minus);
          break;
        case _mod:
          jj_consume_token(_mod);
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        OpPrecedence6();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void OpPrecedence6() throws ParseException {
 /*@bgen(jjtree) OpPrecedence6 */
  ExtendedNode jjtn000 = new ExtendedNode(JJTOPPRECEDENCE6);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OpPrecedence7();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _multiplication:
        case _division:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _multiplication:
          jj_consume_token(_multiplication);
          break;
        case _division:
          jj_consume_token(_division);
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        OpPrecedence7();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void OpPrecedence7() throws ParseException {
 /*@bgen(jjtree) OpPrecedence7 */
  ExtendedNode jjtn000 = new ExtendedNode(JJTOPPRECEDENCE7);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OpPrecedence8();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _minus:
      case _not:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _minus:
          jj_consume_token(_minus);
          break;
        case _not:
          jj_consume_token(_not);
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        OpPrecedence8();
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void OpPrecedence8() throws ParseException {
 /*@bgen(jjtree) OpPrecedence8 */
  ExtendedNode jjtn000 = new ExtendedNode(JJTOPPRECEDENCE8);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_5(2147483647)) {
        Call();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _id:
          LValue();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case _assignop:
            jj_consume_token(_assignop);
            Expr();
            break;
          default:
            jj_la1[43] = jj_gen;
            ;
          }
          break;
        case _null:
        case _booleanconstant:
        case _intconstant:
        case _doubleconstant:
        case _stringconstant:
          Constant();
          break;
        case _leftparen:
          jj_consume_token(_leftparen);
          Expr();
          jj_consume_token(_rightparen);
          break;
        case _minus:
          jj_consume_token(_minus);
          Expr();
          break;
        case _not:
          jj_consume_token(_not);
          Expr();
          break;
        case _readln:
          jj_consume_token(_readln);
          jj_consume_token(_leftparen);
          jj_consume_token(_rightparen);
          break;
        case _new:
          jj_consume_token(_new);
          jj_consume_token(_leftparen);
          jj_consume_token(_id);
          jj_consume_token(_rightparen);
          break;
        case _newarray:
          jj_consume_token(_newarray);
          jj_consume_token(_leftparen);
          jj_consume_token(_intconstant);
          jj_consume_token(_comma);
          Type();
          jj_consume_token(_rightparen);
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void LValue() throws ParseException {
 /*@bgen(jjtree) LValue */
  ExtendedNode jjtn000 = new ExtendedNode(JJTLVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(_id);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _period:
        case _leftbracket:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _leftbracket:
          jj_consume_token(_leftbracket);
          Expr();
          jj_consume_token(_rightbracket);
          break;
        case _period:
          jj_consume_token(_period);
          jj_consume_token(_id);
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Call() throws ParseException {
 /*@bgen(jjtree) Call */
  ExtendedNode jjtn000 = new ExtendedNode(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(_id);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _period:
        jj_consume_token(_period);
        jj_consume_token(_id);
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      jj_consume_token(_leftparen);
      Actuals();
      jj_consume_token(_rightparen);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Actuals() throws ParseException {
 /*@bgen(jjtree) Actuals */
  ExtendedNode jjtn000 = new ExtendedNode(JJTACTUALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _minus:
      case _leftparen:
      case _not:
      case _new:
      case _newarray:
      case _null:
      case _readln:
      case _booleanconstant:
      case _id:
      case _intconstant:
      case _doubleconstant:
      case _stringconstant:
        ExprList();
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Constant() throws ParseException {
 /*@bgen(jjtree) Constant */
  ExtendedNode jjtn000 = new ExtendedNode(JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _intconstant:
        jj_consume_token(_intconstant);
        break;
      case _doubleconstant:
        jj_consume_token(_doubleconstant);
        break;
      case _stringconstant:
        jj_consume_token(_stringconstant);
        break;
      case _booleanconstant:
        jj_consume_token(_booleanconstant);
        break;
      case _null:
        jj_consume_token(_null);
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(_period)) return true;
    if (jj_scan_token(_id)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) jj_scanpos = xsp;
    if (jj_scan_token(_rightbrace)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(_leftbrace)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(_period)) return true;
    if (jj_scan_token(_id)) return true;
    if (jj_scan_token(_leftparen)) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(_period)) return true;
    if (jj_scan_token(_id)) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_scan_token(_leftbracket)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(_id)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    if (jj_scan_token(_leftparen)) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(_rightparen)) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(_id)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_84()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(_assignop)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(_id)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(_newarray)) return true;
    if (jj_scan_token(_leftparen)) return true;
    if (jj_scan_token(_intconstant)) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(_new)) return true;
    if (jj_scan_token(_leftparen)) return true;
    if (jj_scan_token(_id)) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_scan_token(_readln)) return true;
    if (jj_scan_token(_leftparen)) return true;
    if (jj_scan_token(_rightparen)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_scan_token(_not)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(_minus)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(_leftparen)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(_rightparen)) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_79()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    }
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_3R_78()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(_leftbracket)) return true;
    if (jj_scan_token(_rightbracket)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(_leftbracket)) return true;
    if (jj_scan_token(_rightbracket)) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    }
    }
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(_leftbracket)) return true;
    if (jj_scan_token(_rightbracket)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(_leftbracket)) return true;
    if (jj_scan_token(_rightbracket)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(_leftbracket)) return true;
    if (jj_scan_token(_rightbracket)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_65()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_66()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(_id)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(_string)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(_and)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_63()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(_boolean)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(_double)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(_int)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(_or)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_61()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_19()) return true;
    if (jj_scan_token(_id)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(_semicolon)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(_println)) return true;
    if (jj_scan_token(_leftparen)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(_return)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    if (jj_scan_token(_semicolon)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(_break)) return true;
    if (jj_scan_token(_semicolon)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(_for)) return true;
    if (jj_scan_token(_leftparen)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) jj_scanpos = xsp;
    if (jj_scan_token(_semicolon)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(_while)) return true;
    if (jj_scan_token(_leftparen)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(_if)) return true;
    if (jj_scan_token(_leftparen)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    if (jj_scan_token(_semicolon)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyNewGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[50];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xa0000000,0xa0000000,0x10000,0x10000,0x10000,0x10000,0x10000,0x20000000,0x20000000,0x20000000,0x1000,0x0,0x0,0x20000000,0x1000,0x20000000,0x20000000,0x20000000,0x20000000,0x20000000,0x50044840,0x50044840,0x20000000,0x50044840,0x10004040,0x50044840,0x0,0x10004040,0x10004040,0x10004040,0x1000,0x8000000,0x4000000,0x3000000,0x3000000,0xf00000,0xf00000,0x260,0x260,0x180,0x180,0x10000040,0x10000040,0x400,0x10004040,0x12000,0x12000,0x2000,0x10004040,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4c0c1,0x4c0c1,0x0,0x0,0x0,0x0,0x0,0x44041,0x4c041,0x44041,0x0,0x4,0x20,0x4c041,0x0,0x4c041,0x4c041,0x4c041,0x4c041,0x4c041,0x3f3f18,0x3f3f18,0x44041,0x3f3f18,0x3e1700,0x3f3f18,0x2,0x3e1700,0x3e1700,0x3e1700,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3e1700,0x0,0x0,0x0,0x3e1700,0x3a0400,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[5];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyNewGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyNewGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyNewGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyNewGrammar(MyNewGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 50; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
