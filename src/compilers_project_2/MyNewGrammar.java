/* Generated By:JJTree&JavaCC: Do not edit this line. MyNewGrammar.java */
package compilers_project_2;

import java.io.FileNotFoundException;
import java.io.FileInputStream;

public class MyNewGrammar/*@bgen(jjtree)*/implements MyNewGrammarTreeConstants, MyNewGrammarConstants {/*@bgen(jjtree)*/
  protected JJTMyNewGrammarState jjtree = new JJTMyNewGrammarState();
  // trie
  public Trie trie;

  static String tokenName[] = new String[1000];

  public static void main( String args [] ) throws ParseException
  {
tokenName[0] = "EOF"; tokenName[4] = "EOL";
        tokenName[5] = "_plus"; tokenName[6] = "_minus"; tokenName[7] = "_multiplication";
        tokenName[8] = "_division"; tokenName[9] = "_mod"; tokenName[10] = "_assignop";
        tokenName[11] = "_semicolon"; tokenName[12] = "_comma"; tokenName[13] = "_period";
        tokenName[14] = "_leftparen"; tokenName[15] = "_rightparen"; tokenName[16] = "_leftbracket";
        tokenName[17] = "_rightbracket"; tokenName[18] = "_leftbrace"; tokenName[19] = "_rightbrace";
        tokenName[20] = "_less"; tokenName[21] = "_lessequal"; tokenName[22] = "_greater";
        tokenName[23] = "_greaterequal"; tokenName[24] = "_equal"; tokenName[25] = "_notequal";
        tokenName[26] = "_and"; tokenName[27] = "_or"; tokenName[28] = "_not";
        tokenName[29] = "_boolean"; tokenName[30] = "_break"; tokenName[31] = "_class";
        tokenName[32] = "_double"; tokenName[33] = "_else"; tokenName[34] = "_extends";
        tokenName[35] = "_for"; tokenName[36] = "_if"; tokenName[37] = "_implements";
        tokenName[38] = "_int"; tokenName[39] = "_interface"; tokenName[40] = "_new";
        tokenName[41] = "_newarray"; tokenName[42] = "_null"; tokenName[43] = "_println";
        tokenName[44] = "_readln"; tokenName[45] = "_return"; tokenName[46] = "_string";
        tokenName[47] = "_void"; tokenName[48] = "_while"; tokenName[49] = "_booleanconstant";
        tokenName[50] = "_id"; tokenName[51] = "_intconstant"; tokenName[52] = "_doubleconstant";
        tokenName[53] = "_stringconstant"; tokenName[54] = "DIGIT"; tokenName[55] = "LETTER";
        tokenName[56] = "ALPHABET";

    MyNewGrammar parser = null;

    if ( args.length > 0 )
    {
                try
                {
                // We have a file to parse
                System.out.println( "file specified! Reading from file...\u005cn" );
                parser = new MyNewGrammar( new FileInputStream( args[0] ) );
                }
                catch ( FileNotFoundException e )
                {
                    // Specified file doesn't exist so don't go any further
                    System.out.println( "file not found! Terminating..." );
                    return;
                }
        }
        else
        {
                // Default to console input
                System.out.println( "No file specified! Reading from standard input...\u005cn" );
                parser = new MyNewGrammar( System.in );
        }

        try
        {
            parser.trie = new Trie();
            parser.Start();
        }
        catch ( Exception e )
        {
            System.out.println( "NOK." );
            System.out.println( e.getMessage() );
            parser.ReInit( System.in );
        }
        catch ( Error e )
        {
                System.out.println( "Oops." );
        System.out.println( e.getMessage() );
        }
  }

  final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
        SimpleNode jjtn000 = new SimpleNode(JJTSTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);while ( jj_ntk == -1 )
        {
                // Get the next token
                Token token = getNextToken();
                //System.out.print( token.toString() + " " );

                if ( tokenName[token.kind].equals( "EOF" ) )
                {
                        // End of File. Terminate
                        break;
                }
                else if ( tokenName[token.kind].equals( "EOL" ) )
                {
                        // New line 
                        System.out.print( "\u005cn" );
                }
                else
                {
                        // Print the type of token we're parsing
                        System.out.print( tokenName[token.kind] + " " );

                        // Is this an identifier?
                        if ( tokenName[token.kind].equals( "_id" ) )
                        {
                                // Add if to the symbol table
                                trie.addIdentifier( token.toString() );
                        }
                }

        }

        // Print the symbol table
        System.out.print( "\u005cn\u005cnPrinting trie...\u005cn\u005cn " );
        trie.display();
    try {
      Program();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Program() throws ParseException {
 /*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _boolean:
      case _class:
      case _double:
      case _int:
      case _interface:
      case _string:
      case _void:
      case _id:
        Decl();
        break;
        Decl();
        Program();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Decl() throws ParseException {
 /*@bgen(jjtree) Decl */
  SimpleNode jjtn000 = new SimpleNode(JJTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _boolean:
      case _double:
      case _int:
      case _string:
      case _id:
        VariableDecl();
        break;
      case _void:
        FunctionDecl();
        break;
      case _class:
        ClassDecl();
        break;
      case _interface:
        InterfaceDecl();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void VariableDecl() throws ParseException {
 /*@bgen(jjtree) VariableDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Variable();
      jj_consume_token(_semicolon);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Variable() throws ParseException {
 /*@bgen(jjtree) Variable */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      jj_consume_token(_id);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Type() throws ParseException {
 /*@bgen(jjtree) Type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _int:
        jj_consume_token(_int);
        break;
      case _double:
        jj_consume_token(_double);
        break;
      case _boolean:
        jj_consume_token(_boolean);
        break;
      case _string:
        jj_consume_token(_string);
        break;
      case _id:
        jj_consume_token(_id);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FunctionDecl() throws ParseException {
 /*@bgen(jjtree) FunctionDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _boolean:
      case _double:
      case _int:
      case _string:
      case _id:
        Type();
        jj_consume_token(_id);
        jj_consume_token(_leftparen);
        Formals();
        jj_consume_token(_rightparen);
        StmtBlock();
        break;
      case _void:
        jj_consume_token(_void);
        jj_consume_token(_id);
        jj_consume_token(_leftparen);
        Formals();
        jj_consume_token(_rightparen);
        StmtBlock();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Formals() throws ParseException {
 /*@bgen(jjtree) Formals */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _boolean:
      case _double:
      case _int:
      case _string:
      case _id:
        VariableList();
        break;
      case 61:
        jj_consume_token(61);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void VariableList() throws ParseException {
 /*@bgen(jjtree) VariableList */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _boolean:
      case _double:
      case _int:
      case _string:
      case _id:
        Variable();
        jj_consume_token(_comma);
        VariableList();
        break;
        Variable();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ClassDecl() throws ParseException {
 /*@bgen(jjtree) ClassDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _class:
        jj_consume_token(_class);
        jj_consume_token(_id);
        jj_consume_token(_leftbrace);
        jj_consume_token(_rightbrace);
        break;
        jj_consume_token(_class);
        jj_consume_token(_id);
        jj_consume_token(_leftbrace);
        FieldList();
        jj_consume_token(_rightbrace);
        break;
        jj_consume_token(_class);
        jj_consume_token(_id);
        ClassOptions();
        jj_consume_token(_leftbrace);
        jj_consume_token(_rightbrace);
        break;
        jj_consume_token(_class);
        jj_consume_token(_id);
        ClassOptions();
        jj_consume_token(_leftbrace);
        FieldList();
        jj_consume_token(_rightbrace);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FieldList() throws ParseException {
 /*@bgen(jjtree) FieldList */
  SimpleNode jjtn000 = new SimpleNode(JJTFIELDLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _boolean:
      case _double:
      case _int:
      case _string:
      case _void:
      case _id:
        Field();
        break;
        Field();
        FieldList();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ClassOptions() throws ParseException {
 /*@bgen(jjtree) ClassOptions */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSOPTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _extends:
        jj_consume_token(_extends);
        jj_consume_token(_id);
        break;
        jj_consume_token(_extends);
        jj_consume_token(_id);
        ImplementsList();
        break;
      case _implements:
        ImplementsList();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ImplementsList() throws ParseException {
 /*@bgen(jjtree) ImplementsList */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPLEMENTSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _implements:
        jj_consume_token(_implements);
        jj_consume_token(_id);
        break;
        jj_consume_token(_implements);
        jj_consume_token(_id);
        jj_consume_token(_comma);
        ImplementsList();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Field() throws ParseException {
 /*@bgen(jjtree) Field */
  SimpleNode jjtn000 = new SimpleNode(JJTFIELD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _boolean:
      case _double:
      case _int:
      case _string:
      case _id:
        VariableDecl();
        break;
      case _void:
        FunctionDecl();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void InterfaceDecl() throws ParseException {
 /*@bgen(jjtree) InterfaceDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTINTERFACEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _interface:
        jj_consume_token(_interface);
        jj_consume_token(_id);
        jj_consume_token(_leftbrace);
        jj_consume_token(_rightbrace);
        break;
        jj_consume_token(_interface);
        jj_consume_token(_id);
        jj_consume_token(_leftbrace);
        PrototypeList();
        jj_consume_token(_rightbrace);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PrototypeList() throws ParseException {
 /*@bgen(jjtree) PrototypeList */
  SimpleNode jjtn000 = new SimpleNode(JJTPROTOTYPELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _boolean:
      case _double:
      case _int:
      case _string:
      case _void:
      case _id:
        Prototype();
        break;
        Prototype();
        PrototypeList();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Prototype() throws ParseException {
 /*@bgen(jjtree) Prototype */
  SimpleNode jjtn000 = new SimpleNode(JJTPROTOTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _boolean:
      case _double:
      case _int:
      case _string:
      case _id:
        Type();
        jj_consume_token(_id);
        jj_consume_token(_leftparen);
        Formals();
        jj_consume_token(_rightparen);
        jj_consume_token(_semicolon);
        break;
      case _void:
        jj_consume_token(_void);
        jj_consume_token(_id);
        jj_consume_token(_leftparen);
        Formals();
        jj_consume_token(_rightparen);
        jj_consume_token(_semicolon);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void StmtBlock() throws ParseException {
 /*@bgen(jjtree) StmtBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _leftbrace:
        jj_consume_token(_leftbrace);
        jj_consume_token(_rightbrace);
        break;
        jj_consume_token(_leftbrace);
        VariableDeclList();
        jj_consume_token(_rightbrace);
        break;
        jj_consume_token(_leftbrace);
        StmtList();
        jj_consume_token(_rightbrace);
        break;
        jj_consume_token(_leftbrace);
        VariableDeclList();
        StmtList();
        jj_consume_token(_rightbrace);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void VariableDeclList() throws ParseException {
 /*@bgen(jjtree) VariableDeclList */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _boolean:
      case _double:
      case _int:
      case _string:
      case _id:
        VariableDecl();
        break;
        VariableDecl();
        VariableDeclList();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void StmtList() throws ParseException {
 /*@bgen(jjtree) StmtList */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _semicolon:
      case _leftparen:
      case _leftbrace:
      case _break:
      case _for:
      case _if:
      case _new:
      case _newarray:
      case _null:
      case _println:
      case _readln:
      case _return:
      case _while:
      case _booleanconstant:
      case _id:
      case _intconstant:
      case _doubleconstant:
      case _stringconstant:
        Stmt();
        break;
        Stmt();
        StmtList();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Stmt() throws ParseException {
 /*@bgen(jjtree) Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _semicolon:
        jj_consume_token(_semicolon);
        break;
      case _leftparen:
      case _new:
      case _newarray:
      case _null:
      case _readln:
      case _booleanconstant:
      case _id:
      case _intconstant:
      case _doubleconstant:
      case _stringconstant:
        Expr();
        jj_consume_token(_semicolon);
        break;
      case _if:
        IfStmt();
        break;
      case _while:
        WhileStmt();
        break;
      case _for:
        ForStmt();
        break;
      case _break:
        BreakStmt();
        break;
      case _return:
        ReturnStmt();
        break;
      case _println:
        PrintStmt();
        break;
      case _leftbrace:
        StmtBlock();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IfStmt() throws ParseException {
 /*@bgen(jjtree) IfStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _if:
        jj_consume_token(_if);
        jj_consume_token(_leftparen);
        Expr();
        jj_consume_token(_rightparen);
        Stmt();
        break;
        jj_consume_token(_if);
        jj_consume_token(_leftparen);
        Expr();
        jj_consume_token(_rightparen);
        Stmt();
        jj_consume_token(_else);
        Stmt();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void WhileStmt() throws ParseException {
 /*@bgen(jjtree) WhileStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(_while);
      jj_consume_token(_leftparen);
      Expr();
      jj_consume_token(_rightparen);
      Stmt();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ForStmt() throws ParseException {
 /*@bgen(jjtree) ForStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _for:
        jj_consume_token(_for);
        jj_consume_token(_leftparen);
        jj_consume_token(_semicolon);
        Expr();
        jj_consume_token(_semicolon);
        jj_consume_token(_rightparen);
        Stmt();
        break;
        jj_consume_token(_for);
        jj_consume_token(_leftparen);
        Expr();
        jj_consume_token(_semicolon);
        Expr();
        jj_consume_token(_semicolon);
        jj_consume_token(_rightparen);
        Stmt();
        break;
        jj_consume_token(_for);
        jj_consume_token(_leftparen);
        jj_consume_token(_semicolon);
        Expr();
        jj_consume_token(_semicolon);
        Expr();
        jj_consume_token(_rightparen);
        Stmt();
        break;
        jj_consume_token(_for);
        jj_consume_token(_leftparen);
        Expr();
        jj_consume_token(_semicolon);
        Expr();
        jj_consume_token(_semicolon);
        Expr();
        jj_consume_token(_rightparen);
        Stmt();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BreakStmt() throws ParseException {
 /*@bgen(jjtree) BreakStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTBREAKSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(_break);
      jj_consume_token(_semicolon);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ReturnStmt() throws ParseException {
 /*@bgen(jjtree) ReturnStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURNSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _return:
        jj_consume_token(_return);
        jj_consume_token(_semicolon);
        break;
        jj_consume_token(_return);
        Expr();
        jj_consume_token(_semicolon);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PrintStmt() throws ParseException {
 /*@bgen(jjtree) PrintStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTPRINTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(_println);
      jj_consume_token(_leftparen);
      ExprList();
      jj_consume_token(_rightparen);
      jj_consume_token(_semicolon);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ExprList() throws ParseException {
 /*@bgen(jjtree) ExprList */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _leftparen:
      case _new:
      case _newarray:
      case _null:
      case _readln:
      case _booleanconstant:
      case _id:
      case _intconstant:
      case _doubleconstant:
      case _stringconstant:
        Expr();
        break;
        Expr();
        jj_consume_token(_comma);
        ExprList();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Expr() throws ParseException {
 /*@bgen(jjtree) Expr */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _id:
        LValue();
        jj_consume_token(_assignop);
        Expr();
        break;
      case _null:
      case _booleanconstant:
      case _intconstant:
      case _doubleconstant:
      case _stringconstant:
        Constant();
        break;
        LValue();
        break;
        Call();
        break;
      case _leftparen:
        jj_consume_token(_leftparen);
        Expr();
        jj_consume_token(_rightparen);
        break;
      case _readln:
        jj_consume_token(_readln);
        jj_consume_token(_leftparen);
        jj_consume_token(_rightparen);
        break;
      case _new:
        jj_consume_token(_new);
        jj_consume_token(_leftparen);
        jj_consume_token(_id);
        jj_consume_token(_rightparen);
        break;
      case _newarray:
        jj_consume_token(_newarray);
        jj_consume_token(_leftparen);
        jj_consume_token(_intconstant);
        jj_consume_token(_comma);
        Type();
        jj_consume_token(_rightparen);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LValue() throws ParseException {
 /*@bgen(jjtree) LValue */
  SimpleNode jjtn000 = new SimpleNode(JJTLVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(_id);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Call() throws ParseException {
 /*@bgen(jjtree) Call */
  SimpleNode jjtn000 = new SimpleNode(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _id:
        jj_consume_token(_id);
        jj_consume_token(_leftparen);
        Actuals();
        jj_consume_token(_rightparen);
        break;
        jj_consume_token(_id);
        jj_consume_token(_period);
        jj_consume_token(_id);
        jj_consume_token(_leftparen);
        Actuals();
        jj_consume_token(_rightparen);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Actuals() throws ParseException {
 /*@bgen(jjtree) Actuals */
  SimpleNode jjtn000 = new SimpleNode(JJTACTUALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _leftparen:
      case _new:
      case _newarray:
      case _null:
      case _readln:
      case _booleanconstant:
      case _id:
      case _intconstant:
      case _doubleconstant:
      case _stringconstant:
        ExprList();
        break;
      case 61:
        jj_consume_token(61);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Constant() throws ParseException {
 /*@bgen(jjtree) Constant */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _intconstant:
        jj_consume_token(_intconstant);
        break;
      case _doubleconstant:
        jj_consume_token(_doubleconstant);
        break;
      case _stringconstant:
        jj_consume_token(_stringconstant);
        break;
      case _booleanconstant:
        jj_consume_token(_booleanconstant);
        break;
      case _null:
        jj_consume_token(_null);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  /** Generated Token Manager. */
  public MyNewGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xa0000000,0xa0000000,0x20000000,0x20000000,0x20000000,0x20000000,0x80000000,0x20000000,0x0,0x0,0x20000000,0x0,0x20000000,0x20000000,0x40000,0x20000000,0x40044800,0x40044800,0x0,0x0,0x0,0x4000,0x4000,0x0,0x4000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4c0c1,0x4c0c1,0x44041,0x4c041,0x20044041,0x44041,0x0,0x4c041,0x24,0x20,0x4c041,0x80,0x4c041,0x4c041,0x0,0x44041,0x3f3f18,0x3f3f18,0x10,0x8,0x2000,0x3e1700,0x3e1700,0x40000,0x203e1700,0x3a0400,};
   }

  /** Constructor with InputStream. */
  public MyNewGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyNewGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyNewGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyNewGrammar(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[62];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 62; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
