/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MyNewGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
/***********************************************************************************
* Collaborators: Prado, Arden & Francisco Rodriguez
* Project: 2
* Due: 12/03/2018
* Course: cs-4110-01
*
* Instructions for Running:
* The program can be compiled from command line or terminal using the command "javac *.java"
* This will compile all java files in the source. This step can also be skipped if using the 
* .class files provided. To run the program, type "java -cp [PATH] compilers_project_2.MyNewGrammar [FILENAME]"
* Where [PATH] specifies the install path to the compilers_project_2 package, and [FILENAME] specifies the file to be parsed.
* Included in the program are various test files located in folder /test 
***********************************************************************************/options
{
  DEBUG_PARSER = false;
  static = true;
                              
}

PARSER_BEGIN( MyNewGrammar )
package compilers_project_2;

import java.io.FileNotFoundException;
import java.io.FileInputStream;

public class MyNewGrammar/*@bgen(jjtree)*/implements MyNewGrammarTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTMyNewGrammarState jjtree = new JJTMyNewGrammarState();

/*@egen*/
 
  // trie
  public Trie trie;
  
  static String tokenName[] = new String[1000];
  
  public static void main( String args [] ) throws ParseException
  {
tokenName[0] = "EOF"; tokenName[4] = "EOL";
	tokenName[5] = "_plus"; tokenName[6] = "_minus"; tokenName[7] = "_multiplication";
	tokenName[8] = "_division"; tokenName[9] = "_mod"; tokenName[10] = "_assignop";
	tokenName[11] = "_semicolon"; tokenName[12] = "_comma"; tokenName[13] = "_period";
	tokenName[14] = "_leftparen"; tokenName[15] = "_rightparen"; tokenName[16] = "_leftbracket";
	tokenName[17] = "_rightbracket"; tokenName[18] = "_leftbrace"; tokenName[19] = "_rightbrace";
	tokenName[20] = "_less"; tokenName[21] = "_lessequal"; tokenName[22] = "_greater";
	tokenName[23] = "_greaterequal"; tokenName[24] = "_equal"; tokenName[25] = "_notequal";
	tokenName[26] = "_and"; tokenName[27] = "_or"; tokenName[28] = "_not";
	tokenName[29] = "_boolean"; tokenName[30] = "_break"; tokenName[31] = "_class";
	tokenName[32] = "_double"; tokenName[33] = "_else"; tokenName[34] = "_extends";
	tokenName[35] = "_for"; tokenName[36] = "_if"; tokenName[37] = "_implements";
	tokenName[38] = "_int"; tokenName[39] = "_interface"; tokenName[40] = "_new";
	tokenName[41] = "_newarray"; tokenName[42] = "_null"; tokenName[43] = "_println";
	tokenName[44] = "_readln"; tokenName[45] = "_return"; tokenName[46] = "_string";
	tokenName[47] = "_void"; tokenName[48] = "_while"; tokenName[49] = "_booleanconstant";
	tokenName[50] = "_id"; tokenName[51] = "_intconstant"; tokenName[52] = "_doubleconstant";
	tokenName[53] = "_stringconstant"; tokenName[54] = "DIGIT"; tokenName[55] = "LETTER";
	tokenName[56] = "ALPHABET";

    MyNewGrammar parser = null;
    ExtendedNode n;
    
    if ( args.length > 0 )
    {
  		try
  		{ 
      		// We have a file to parse
      		System.out.println( "file specified! Reading from file...\n" );
      		parser = new MyNewGrammar( new FileInputStream( args[0] ) );

      		// Display tokens
			while ( jj_ntk == -1 )
		  	{
		 		// Get the next token
		 		Token token = getNextToken();
		 		//System.out.print( token.toString() + " " );
		
			 	if ( tokenName[token.kind].equals( "EOF" ) )
			 	{
				   	// End of File. Terminate
				   	break;
			 	}	
			 	else if ( tokenName[token.kind].equals( "EOL" ) )
			 	{
				   	// New line 
				   	System.out.print( "\n" );
			 	}
			 	else
			 	{
			 	  	// Print the type of token we're parsing
				 	System.out.println( tokenName[token.kind] + " " );
		
			 	}
				 
			}
			System.out.println();
			System.out.println();
			
			// Reinitialize parser
			ReInit(new FileInputStream( args[0]));
  		}
  		catch ( FileNotFoundException e )
  		{
		    // Specified file doesn't exist so don't go any further
		    System.out.println( "file not found! Terminating..." );
		    return;
  		}
	}
	else
	{
  		// Default to console input
	  	System.out.println( "No file specified! Reading from standard input...\n" );
	  	parser = new MyNewGrammar( System.in );
	}
    
	try
	{
	  	n = MyNewGrammar.Start();
	  	System.out.println("Printing parse tree...");
      	n.dump("");
	    parser.trie = new Trie();
	    
  	}
	catch ( Exception e )
  	{
	    System.out.println( "NOK." );
	    System.out.println( e.getMessage() );
	    parser.ReInit( System.in );
 	}
  	catch ( Error e )
  	{
   		System.out.println( "Oops." );
    	System.out.println( e.getMessage() );
  	}
  }
}PARSER_END(MyNewGrammar)SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < _plus : "+" >
| < _minus : "-" >
| < _multiplication : "*" >
| < _division : "/" >
| < _mod : "%" >
| < _assignop : "=" >
| < _semicolon : ";" >
| < _comma : "," >
| < _period : "." >
| < _leftparen : "(" >
| < _rightparen : ")" >
| < _leftbracket : "[" >
| < _rightbracket : "]" >
| < _leftbrace : "{" >
| < _rightbrace : "}" >
}

TOKEN : /* LOGICAL */
{
  < _less : "<" >
| < _lessequal : "<=" >
| < _greater : ">" >
| < _greaterequal : ">=" >
| < _equal : "==" >
| < _notequal : "!=" >
| < _and : "&&" >
| < _or : "||" >
| < _not : "!" >
}

TOKEN : /* RESERVED */
{
  < _boolean : "boolean" >
| < _break : "break" >
| < _class : "class" >
| < _double : "double" >
| < _else : "else" >
| < _extends : "extends" >
| < _for : "for" >
| < _if : "if" >
| < _implements : "implements" >
| < _int : "int" >
| < _interface : "interface" >
| < _new : "new" >
| < _newarray : "newarray" >
| < _null : "null" >
| < _println : "println" >
| < _readln : "readln" >
| < _return : "return" >
| < _string : "string" >
| < _void : "void" >
| < _while : "while" >
}

TOKEN : /* BOOLEAN CONSTANT */
{
  < _booleanconstant : "true" | "false" >
}

TOKEN : /* IDENTIFIER */
{
  < _id : < LETTER >(< LETTER >|< DIGIT >|"_")* >
}

TOKEN : /* STATIC TOKENS */
{
  < _intconstant : (< DIGIT >)+ | ("0x" | "0X") (< DIGIT > |
  	"a" | "A" | "b" | "B" | "c" | "C" | "d" | "D" |
  	"e" | "E" | "f" | "F" )+ | (< DIGIT >)+ ( "E" | "e" ) "+" (< DIGIT >)+>
|   < _doubleconstant : (< DIGIT >)+ "." (< DIGIT >)* |
  	(< DIGIT >)+ "." (< DIGIT >)* ("E" | "e") ("+" | "-")? (< DIGIT >)+>
| < _stringconstant : "\"" ( ~["\r", "\n", "\""] )* "\"" >
| < #DIGIT : ["0"-"9"] >
| < #LETTER : ["a"-"z", "A"-"Z"] >
| < #ALPHABET : [" " - "~"] >
}

SKIP : /* COMMENTS */
{
  < LINECOMMENT : "//" ( ~["\r", "\n"] )* > // Line comments should skip the entire line
| < ML_COMMENT_START : "/*" > : IN_ML_COMMENT
}

< IN_ML_COMMENT > SKIP :
{
  < ML_COMMENT_END : "*/" > : DEFAULT
| < ~[] >
}ExtendedNode Start() :{/*@bgen(jjtree) Start */
  ExtendedNode jjtn000 = new ExtendedNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/  Program()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Program() :{/*@bgen(jjtree) Program */
  ExtendedNode jjtn000 = new ExtendedNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Program */
  try {
/*@egen*/
  Decl() [ Program() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Decl() :{/*@bgen(jjtree) Decl */
  ExtendedNode jjtn000 = new ExtendedNode(JJTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Decl */
  try {
/*@egen*/
  LOOKAHEAD(3) VariableDecl()
  | FunctionDecl()
  | ClassDecl()
  | InterfaceDecl()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void VariableDecl() :{/*@bgen(jjtree) VariableDecl */
  ExtendedNode jjtn000 = new ExtendedNode(JJTVARIABLEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) VariableDecl */
  try {
/*@egen*/  Variable() < _semicolon >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Variable() :{/*@bgen(jjtree) Variable */
  ExtendedNode jjtn000 = new ExtendedNode(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Variable */
  try {
/*@egen*/  Type() < _id >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Type() :{/*@bgen(jjtree) Type */
  ExtendedNode jjtn000 = new ExtendedNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Type */
  try {
/*@egen*/  < _int > (< _leftbracket > < _rightbracket >)* 
| < _double > (< _leftbracket > < _rightbracket >)* 
| < _boolean > (< _leftbracket > < _rightbracket >)* 
| < _string > (< _leftbracket > < _rightbracket >)* 
| < _id > (< _leftbracket > < _rightbracket >)*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}
void FunctionDecl() :{/*@bgen(jjtree) FunctionDecl */
  ExtendedNode jjtn000 = new ExtendedNode(JJTFUNCTIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionDecl */
  try {
/*@egen*/  Type() < _id > <_leftparen > Formals() <_rightparen > StmtBlock()
| < _void > < _id > < _leftparen > Formals() < _rightparen > StmtBlock()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void Formals() :
{/*@bgen(jjtree) Formals */
  ExtendedNode jjtn000 = new ExtendedNode(JJTFORMALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Formals */
  try {
/*@egen*/
  [ VariableList() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VariableList() :
{/*@bgen(jjtree) VariableList */
  ExtendedNode jjtn000 = new ExtendedNode(JJTVARIABLELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableList */
  try {
/*@egen*/
  Variable() [ < _comma > VariableList() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ClassDecl() :
{/*@bgen(jjtree) ClassDecl */
  ExtendedNode jjtn000 = new ExtendedNode(JJTCLASSDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassDecl */
  try {
/*@egen*/
  < _class > < _id > [ < _extends > < _id > ] [ ImplementsList() ] < _leftbrace > [ FieldList() ] < _rightbrace >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ImplementsList() :
{/*@bgen(jjtree) ImplementsList */
  ExtendedNode jjtn000 = new ExtendedNode(JJTIMPLEMENTSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImplementsList */
  try {
/*@egen*/
  < _implements > < _id > ( < _comma > < _implements > < _id > )*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void FieldList() :
{/*@bgen(jjtree) FieldList */
  ExtendedNode jjtn000 = new ExtendedNode(JJTFIELDLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FieldList */
  try {
/*@egen*/
  Field() [ FieldList() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Field() :
{/*@bgen(jjtree) Field */
  ExtendedNode jjtn000 = new ExtendedNode(JJTFIELD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Field */
  try {
/*@egen*/
  LOOKAHEAD(3) VariableDecl()
| FunctionDecl()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void InterfaceDecl() :
{/*@bgen(jjtree) InterfaceDecl */
  ExtendedNode jjtn000 = new ExtendedNode(JJTINTERFACEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InterfaceDecl */
  try {
/*@egen*/
  < _interface > < _id > < _leftbrace > [ PrototypeList() ] < _rightbrace >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PrototypeList() :
{/*@bgen(jjtree) PrototypeList */
  ExtendedNode jjtn000 = new ExtendedNode(JJTPROTOTYPELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrototypeList */
  try {
/*@egen*/
  Prototype() [ PrototypeList() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Prototype() :
{/*@bgen(jjtree) Prototype */
  ExtendedNode jjtn000 = new ExtendedNode(JJTPROTOTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Prototype */
  try {
/*@egen*/
  Type() < _id > < _leftparen > Formals() < _rightparen > < _semicolon >
| < _void > < _id > < _leftparen > Formals() < _rightparen > < _semicolon >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void StmtBlock() :
{/*@bgen(jjtree) StmtBlock */
  ExtendedNode jjtn000 = new ExtendedNode(JJTSTMTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StmtBlock */
  try {
/*@egen*/
  < _leftbrace > StmtBlockPrime()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void StmtBlockPrime() :
{/*@bgen(jjtree) StmtBlockPrime */
  ExtendedNode jjtn000 = new ExtendedNode(JJTSTMTBLOCKPRIME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StmtBlockPrime */
  try {
/*@egen*/
  LOOKAHEAD( 3 )
  [ StmtList() ] < _rightbrace >
|
  VariableDeclList() [ StmtList() ] < _rightbrace >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VariableDeclList() :
{/*@bgen(jjtree) VariableDeclList */
  ExtendedNode jjtn000 = new ExtendedNode(JJTVARIABLEDECLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableDeclList */
  try {
/*@egen*/
  VariableDecl() VariableDeclListPrime()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VariableDeclListPrime() :
{/*@bgen(jjtree) VariableDeclListPrime */
  ExtendedNode jjtn000 = new ExtendedNode(JJTVARIABLEDECLLISTPRIME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableDeclListPrime */
  try {
/*@egen*/
  LOOKAHEAD( 2 )
  VariableDeclList()
|/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void StmtList() :
{/*@bgen(jjtree) StmtList */
  ExtendedNode jjtn000 = new ExtendedNode(JJTSTMTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StmtList */
  try {
/*@egen*/
  Stmt() [ StmtList() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Stmt() :
{/*@bgen(jjtree) Stmt */
  ExtendedNode jjtn000 = new ExtendedNode(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stmt */
  try {
/*@egen*/
  [ Expr() ] < _semicolon >
| IfStmt()
| WhileStmt()
| ForStmt()
| BreakStmt()
| ReturnStmt()
| PrintStmt()
| StmtBlock()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IfStmt() :
{/*@bgen(jjtree) IfStmt */
  ExtendedNode jjtn000 = new ExtendedNode(JJTIFSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStmt */
  try {
/*@egen*/
  < _if > < _leftparen > Expr() < _rightparen > Stmt() [ < _else > Stmt() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WhileStmt() :
{/*@bgen(jjtree) WhileStmt */
  ExtendedNode jjtn000 = new ExtendedNode(JJTWHILESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileStmt */
  try {
/*@egen*/
  < _while > < _leftparen > Expr() < _rightparen > Stmt()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ForStmt() :
{/*@bgen(jjtree) ForStmt */
  ExtendedNode jjtn000 = new ExtendedNode(JJTFORSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForStmt */
  try {
/*@egen*/
  < _for > < _leftparen > [ Expr() ] < _semicolon > Expr() < _semicolon > [ Expr() ] < _rightparen > Stmt()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BreakStmt() :
{/*@bgen(jjtree) BreakStmt */
  ExtendedNode jjtn000 = new ExtendedNode(JJTBREAKSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BreakStmt */
  try {
/*@egen*/
  < _break > < _semicolon >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ReturnStmt() :
{/*@bgen(jjtree) ReturnStmt */
  ExtendedNode jjtn000 = new ExtendedNode(JJTRETURNSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnStmt */
  try {
/*@egen*/
  < _return > [ Expr() ] < _semicolon >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PrintStmt() :
{/*@bgen(jjtree) PrintStmt */
  ExtendedNode jjtn000 = new ExtendedNode(JJTPRINTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrintStmt */
  try {
/*@egen*/
  < _println > < _leftparen > ExprList() < _rightparen > < _semicolon >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExprList() :
{/*@bgen(jjtree) ExprList */
  ExtendedNode jjtn000 = new ExtendedNode(JJTEXPRLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExprList */
  try {
/*@egen*/
  Expr() [ < _comma > ExprList() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expr() :
{/*@bgen(jjtree) Expr */
  ExtendedNode jjtn000 = new ExtendedNode(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr */
  try {
/*@egen*/
  OpPrecedence1()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OpPrecedence1() :
{/*@bgen(jjtree) OpPrecedence1 */
  ExtendedNode jjtn000 = new ExtendedNode(JJTOPPRECEDENCE1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OpPrecedence1 */
  try {
/*@egen*/
  OpPrecedence2() ( < _or > OpPrecedence2() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OpPrecedence2() :
{/*@bgen(jjtree) OpPrecedence2 */
  ExtendedNode jjtn000 = new ExtendedNode(JJTOPPRECEDENCE2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OpPrecedence2 */
  try {
/*@egen*/
  OpPrecedence3() ( < _and > OpPrecedence3() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OpPrecedence3() :
{/*@bgen(jjtree) OpPrecedence3 */
  ExtendedNode jjtn000 = new ExtendedNode(JJTOPPRECEDENCE3);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OpPrecedence3 */
  try {
/*@egen*/
  OpPrecedence4() ( ( < _equal > | < _notequal > ) OpPrecedence4() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OpPrecedence4() :
{/*@bgen(jjtree) OpPrecedence4 */
  ExtendedNode jjtn000 = new ExtendedNode(JJTOPPRECEDENCE4);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OpPrecedence4 */
  try {
/*@egen*/
  OpPrecedence5() [ ( < _less > | < _lessequal > | < _greater > | < _greaterequal > ) OpPrecedence5() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OpPrecedence5() :
{/*@bgen(jjtree) OpPrecedence5 */
  ExtendedNode jjtn000 = new ExtendedNode(JJTOPPRECEDENCE5);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OpPrecedence5 */
  try {
/*@egen*/
  OpPrecedence6() ( ( < _plus > | < _minus > | < _mod > ) OpPrecedence6() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OpPrecedence6() :
{/*@bgen(jjtree) OpPrecedence6 */
  ExtendedNode jjtn000 = new ExtendedNode(JJTOPPRECEDENCE6);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OpPrecedence6 */
  try {
/*@egen*/
  OpPrecedence7() ( ( < _multiplication > | < _division > ) OpPrecedence7() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OpPrecedence7() :
{/*@bgen(jjtree) OpPrecedence7 */
  ExtendedNode jjtn000 = new ExtendedNode(JJTOPPRECEDENCE7);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OpPrecedence7 */
  try {
/*@egen*/
  OpPrecedence8() [ ( < _minus > | < _not > ) OpPrecedence8() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OpPrecedence8() :
{/*@bgen(jjtree) OpPrecedence8 */
  ExtendedNode jjtn000 = new ExtendedNode(JJTOPPRECEDENCE8);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OpPrecedence8 */
  try {
/*@egen*/
  LOOKAHEAD( < _id > ( ( < _leftparen > ) | ( < _period > < _id > < _leftparen > ) ) )
  Call()
| LValue() [ < _assignop > Expr() ]
| Constant()
| < _leftparen > Expr() < _rightparen >
| < _minus > Expr()
| < _not > Expr()
| < _readln > < _leftparen > < _rightparen >
| < _new > < _leftparen > < _id > < _rightparen >
| < _newarray > < _leftparen > < _intconstant > < _comma > Type() < _rightparen >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void LValue() :
{/*@bgen(jjtree) LValue */
  ExtendedNode jjtn000 = new ExtendedNode(JJTLVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LValue */
  try {
/*@egen*/
  < _id > ( ( < _leftbracket > Expr() < _rightbracket > ) | ( < _period > < _id > ) )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Call() :
{/*@bgen(jjtree) Call */
  ExtendedNode jjtn000 = new ExtendedNode(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Call */
  try {
/*@egen*/
  < _id > [ < _period > < _id > ] < _leftparen > Actuals() < _rightparen >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Actuals() :
{/*@bgen(jjtree) Actuals */
  ExtendedNode jjtn000 = new ExtendedNode(JJTACTUALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Actuals */
  try {
/*@egen*/
  [ ExprList() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Constant() :
{/*@bgen(jjtree) Constant */
  ExtendedNode jjtn000 = new ExtendedNode(JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Constant */
  try {
/*@egen*/
  < _intconstant >
| < _doubleconstant >
| < _stringconstant >
| < _booleanconstant >
| < _null >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}